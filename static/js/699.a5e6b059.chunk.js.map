{"version":3,"file":"static/js/699.a5e6b059.chunk.js","mappings":"mLAAaA,EAAQ,WACnB,OAAO,2DACR,C,4ECAYC,EAAS,WACpB,OACE,0BACE,SAAC,KAAD,KAGL,C,wJCRYC,EAAa,WACxB,OAAO,oEACR,E,SC6CD,EAxCgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,WACRL,GAAW,IACX,iBAAC,8GAEyBM,EAAAA,EAAAA,IAAkBH,GAF3C,OAESN,EAFT,OAGGC,EAAWD,GACXG,GAAW,GAJd,gDAMGA,GAAW,GACXE,GAAS,GAPZ,wDAAD,EAUD,GAAE,CAACC,KAGF,gCACGJ,IAAW,SAACL,EAAA,EAAD,IACXO,IAAS,SAACR,EAAA,EAAD,KACRI,EAAQU,SAAU,SAACZ,EAAD,KACpB,wBACGE,EAAQU,QACPV,EAAQW,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzB,OACE,2BACE,uBAAID,KACJ,uBAAIC,MAFGF,EAKZ,QAIV,C,sLC7CKG,EAAW,gCACXC,EAAM,mCAECC,EAAgB,mCAAG,sGACPC,MAAM,GAAD,OAAIH,EAAJ,oCAAwCC,IADtC,YACxBG,EADwB,QAEjBC,GAFiB,gCAGTD,EAASE,OAHA,cAGtBC,EAHsB,yBAIrBA,EAAKC,SAJgB,aAMxB,IAAI3B,MAAM,oBANc,2CAAH,qDAShB4B,EAAY,mCAAG,WAAMlB,GAAN,yFACHY,MAAM,GAAD,OACvBH,EADuB,iBACNT,EADM,oBACaU,EADb,oBADF,YACpBG,EADoB,QAIbC,GAJa,gCAKLD,EAASE,OALJ,cAKlBC,EALkB,yBAMjBA,GANiB,aAQpB,IAAI1B,MAAM,oBARU,2CAAH,sDAWZ6B,EAAiB,mCAAG,WAAMnB,GAAN,yFACRY,MAAM,GAAD,OACvBH,EADuB,iBACNT,EADM,4BACqBU,EADrB,oBADG,YACzBG,EADyB,QAIlBC,GAJkB,gCAKVD,EAASE,OALC,cAKvBC,EALuB,yBAMtBA,EAAKI,MANiB,aAQzB,IAAI9B,MAAM,oBARe,2CAAH,sDAWjBa,EAAiB,mCAAG,WAAMH,GAAN,yFACRY,MAAM,GAAD,OACvBH,EADuB,iBACNT,EADM,4BACqBU,EADrB,2BADG,YACzBG,EADyB,QAIlBC,GAJkB,gCAKVD,EAASE,OALC,cAKvBC,EALuB,yBAMtBA,EAAKC,SANiB,aAQzB,IAAI3B,MAAM,oBARe,2CAAH,sDAWjB+B,EAAa,mCAAG,WAAMC,GAAN,yFACJV,MAAM,GAAD,OACvBH,EADuB,gCACSC,EADT,iCACqCY,EADrC,gCADD,YACrBT,EADqB,QAIdC,GAJc,gCAKND,EAASE,OALH,cAKnBC,EALmB,yBAMlBA,EAAKC,SANa,aAQrB,IAAI3B,MAAM,oBARW,2CAAH,qD","sources":["components/Error/Error.js","components/Loader/Loader.jsx","components/Info/NotReviews.js","components/Reviews/Reviews.jsx","utils/fetchAPI.js"],"sourcesContent":["export const Error = () => {\n  return <div>Error. Sorry no find any films</div>;\n};\n","import { Vortex } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <div>\n      <Vortex />\n    </div>\n  );\n};\n","export const NotReviews = () => {\n  return <p>We don't have any reviews for this movie!</p>;\n};\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { Error } from 'components/Error/Error';\nimport { NotReviews } from 'components/Info/NotReviews';\nimport { getFetchByReviews } from 'utils/fetchAPI';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoadind] = useState(false);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setLoadind(true);\n    (async () => {\n      try {\n        const reviews = await getFetchByReviews(movieId);\n        setReviews(reviews);\n        setLoadind(false);\n      } catch (error) {\n        setLoadind(false);\n        setError(true);\n      }\n    })();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading && <Loader />}\n      {error && <Error />}\n      {!reviews.length && <NotReviews />}\n      <ul>\n        {reviews.length &&\n          reviews.map(({ id, author, content }) => {\n            return (\n              <li key={id}>\n                <b>{author}</b>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n      </ul>\n    </>\n  );\n};\n\nexport default Reviews;\n// {\n//   loading && <Loader />;\n// }\n// {\n//   error && <Error />;\n// }\n// {\n//   !reviews && <NotReviews />;\n// }\n// <ul>\n//   {reviews &&\n//     reviews.map(({ id, author, content }) => {\n//       return (\n//         <li key={id}>\n//           <b>{author}</b>\n//           <p>{content}</p>\n//         </li>\n//       );\n//     })}\n// </ul>;\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst KEY = '2c7f5557ee0d3184d19fc3f4461cd963';\n\nexport const getFetchTrending = async () => {\n  const response = await fetch(`${BASE_URL}trending/all/day?api_key=${KEY}`);\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  throw new Error('Error responsive');\n};\n\nexport const getFetchById = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n  if (response.ok) {\n    const data = await response.json();\n    return data;\n  }\n  throw new Error('Error responsive');\n};\n\nexport const getFetchByCredits = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  if (response.ok) {\n    const data = await response.json();\n    return data.cast;\n  }\n  throw new Error('Error responsive');\n};\n\nexport const getFetchByReviews = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  throw new Error('Error responsive');\n};\n\nexport const getFetchQuery = async query => {\n  const response = await fetch(\n    `${BASE_URL}search/movie?api_key=${KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  if (response.ok) {\n    const data = await response.json();\n    return data.results;\n  }\n  throw new Error('Error responsive');\n};\n"],"names":["Error","Loader","NotReviews","useState","reviews","setReviews","loading","setLoadind","error","setError","movieId","useParams","useEffect","getFetchByReviews","length","map","id","author","content","BASE_URL","KEY","getFetchTrending","fetch","response","ok","json","data","results","getFetchById","getFetchByCredits","cast","getFetchQuery","query"],"sourceRoot":""}